# Copyright 2018 HM Revenue & Customs
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This is the main configuration file for the application.
# ~~~~~

appName=openid-connect-userinfo

play.modules.enabled += "com.kenshoo.play.metrics.PlayModule"
play.http.requestHandler = "play.api.http.GlobalSettingsHttpRequestHandler"

appUrl="https://"${appName}".protected.mdtp"

# Session Timeout
# ~~~~
# The default session timeout for the app is 15 minutes (900seconds).
# Updating this is the responsibility of the app - it must issue a new cookie with each request or the session will
# timeout 15 minutes after login (regardless of user activity).
# session.maxAge=900

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
application.secret="thisIsJustToShutPlayUpAndGetsReplacedInAnyHigherEnvironmentsByAnEncryptedKeyProvidedByOps"

# Session configuration
# ~~~~~
application.session.httpOnly=false

application.session.secure=false

# The application languages
# ~~~~~
application.langs="en"

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
application.global= uk.gov.hmrc.openidconnect.userinfo.config.MicroserviceGlobal

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# !!!WARNING!!! DO NOT CHANGE THIS ROUTER
application.router=prod.Routes

# DES API endpoint
des.individual.endpoint=/pay-as-you-earn/02.00.00/individuals/

# Controller
# ~~~~~
# By default all controllers will have authorisation, logging and 
# auditing (transaction monitoring) enabled.
# The below controllers are the default exceptions to this rule. 

controllers {
    confidenceLevel = 50

    com.kenshoo.play.metrics.MetricsController = {
        needsAuth = false
        needsLogging = false
        needsAuditing = false
    }

    uk.gov.hmrc.openidconnect.userinfo.controllers.DocumentationController = {
        needsAuth = false
        needsLogging = true
        needsAuditing = false
    }

    uk.gov.hmrc.openidconnect.userinfo.controllers.LiveUserInfoController = {
        needsAuth = true
        needsLogging = true
        needsAuditing = false
        authParams.pattern = "/([\\d\\w-]+).*"
    }

    uk.gov.hmrc.openidconnect.userinfo.controllers.SandboxUserInfoController = {
        needsAuth = false
        needsLogging = true
        needsAuditing = false
    }

    uk.gov.hmrc.openidconnect.userinfo.controllers.testOnly.FeatureSwitchController = {
        needsAuth = false
        needsLogging = true
        needsAuditing = false
    }
}

# Root logger:
logger.root=ERROR

# Logger used by the framework:
logger.play=INFO

# Logger provided to your application:
logger.application=DEBUG

# Metrics plugin settings - graphite reporting is configured on a per env basis
metrics {
    name = ${appName}
    rateUnit = SECONDS
    durationUnit = SECONDS
    showSamples = true
    jvm = true
    enabled = true
}

# Microservice specific config

wiremock-port = 22222
wiremock-port = ${?WIREMOCK_PORT}

Test {

    api.access {
        type = PRIVATE
        white-list.applicationIds = []
    }

    auditing {
        enabled=true
        traceRequests=false

        consumer {
            baseUri {
                host = ${wiremock-port}
                port = 8100
            }
        }
    }

    microservice {
        metrics {
            graphite {
                host = graphite
                port = 2003
                prefix = play.${appName}.
                enabled = false
            }
        }

        services {

            auth {
                host=localhost
                port=22221
            }

            datastream {
                host=localhost
                port=${wiremock-port}
            }

            des {
                host=localhost
                port=22222
                bearer-token = "local"
                environment = "local"
            }

            service-locator {
                host=localhost
                port=${wiremock-port}
            }

            third-party-delegated-authority {
                host=localhost
                port=22223
            }

            user-details {
                host=localhost
                port=22224
            }
        }
    }
}

Dev {

    api.access {
        type = PRIVATE
        white-list.applicationIds = []
    }

    auditing {
        enabled=true
        traceRequests=false

        consumer {
            baseUri {
                host = localhost
                port = 8100
            }
        }
    }

    microservice {
        metrics {
            graphite {
                host = graphite
                port = 2003
                prefix = play.${appName}.
                enabled = false
            }
        }

        services {

            auth {
                host=localhost
                port=8500
            }

            datastream {
                host=localhost
                port=8100
            }

            des {
                host=localhost
                port=9625
                bearer-token = "local"
                environment = "local"
            }

            service-locator {
              host=localhost
              port=9602
            }

            third-party-delegated-authority {
                host=localhost
                port=9609
            }

            user-details {
                host=localhost
                port=9978
            }
        }
    }
}

Prod {

    api.access {
        type = PUBLIC
        white-list.applicationIds = []
    }

    auditing {
        enabled=true
        traceRequests=true
        consumer {
            baseUri {
                host = datastream.protected.mdtp
                port = 443
                protocol = https
            }
        }
    }

    microservice {
        metrics {
            graphite {
                host = graphite
                port = 2003
                prefix = play.${appName}.
                enabled = true
            }
        }

        services {

            auth {
                host = auth.protected.mdtp
                port = 443
                protocol = https
            }

            datastream {
                host = datastream.protected.mdtp
                port = 443
                protocol = https
            }

            des {
                host = hods-proxy
                port = 443
                protocol = https
                bearer-token = "TO_DEFINE"
                environment = "live"
            }

            service-locator {
                host = service-locator.protected.mdtp
                port = 443
                protocol = https
            }

            third-party-delegated-authority {
                host = localhost
                port = 9609
            }

            user-details {
                host = user-details.protected.mdtp
                port = 443
                protocol = https
            }
        }
    }
}

log-user-info-response-payload = false
